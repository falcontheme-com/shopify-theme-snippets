{% liquid 
  # KS Store Locator
  # Â© 2024 KondaSoft
  # https://www.kondasoft.com
%}
<script src="https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.js" defer></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.css" rel="stylesheet"/>

{% if section.settings.controls_geocoder %}
  <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js" defer></script>
  <link href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css" rel="stylesheet">
{% endif %}

{%- style -%}
  #ks-store-locator-{{ section.id }} {
    --color-background: {{ section.settings.color_background.red }}, {{ section.settings.color_background.green }}, {{ section.settings.color_background.blue }};
    --color-foreground: {{ section.settings.color_foreground.red }}, {{ section.settings.color_foreground.green }}, {{ section.settings.color_foreground.blue }};
    display: block;
    overflow: hidden;
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  .ks-store-locator .section-header .title {
    margin: 0 0 .25rem;
  }

  .ks-store-locator .section-header .description {
    margin-bottom: 1rem;
  }

  @media (min-width: 750px) {
    #ks-store-locator-{{ section.id }} {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
    .ks-store-locator .section-header .title {
      margin: 0 0 .5rem;
    }
    .ks-store-locator .section-header .description {
      margin-bottom: 1.5rem;
    }
  }

  .ks-store-locator .section-header {
    text-align: center;
  }

  .ks-store-locator-map-wrapper {
    position: relative
  }

  .ks-store-locator-map {
    width: 100%;
  }

  #ks-store-locator-map-{{ section.id }} {
    height: {{ section.settings.map_height_mobile | append: 'px' }};
    border-radius: {{ section.settings.map_border_radius | append: 'px' }}
  }

  @media (min-width: 750px) {
    #ks-store-locator-map-{{ section.id }} {
      height: {{ section.settings.map_height_desktop | append: 'px' }};
    }
  }

  .ks-store-locator-map .mapboxgl-popup-close-button {
    font-size: 18px;
    color: currentColor;
  }

  .ks-store-locator-map .mapboxgl-popup-content {
    padding: 12px;
    line-height: normal;
  } 

  .ks-store-locator-map .mapboxgl-popup-content > * {
    margin-bottom: 4px;
  }
   
  #ks-store-locator-map-{{ section.id }} .mapboxgl-popup-content {
    background: {{ section.settings.popup_bg_color }};
    color: {{ section.settings.popup_text_color }};
    border-radius: {{ section.settings.map_border_radius | divided_by: 2 | append: 'px' }}
  }

  .ks-store-locator-map .mapboxgl-popup-content a {
    color: currentColor;
    text-decoration: underline;
  }

  .ks-store-locator-map .mapboxgl-popup-title {
    font-weight: bold;
    padding-right: 16px;
  }

  .ks-store-locator-map .mapboxgl-popup-directions {
    margin-top: 8px;
    margin-bottom: 0;
  }

  .ks-store-locator-card {
    overflow: auto;
    font-size: 15px;
    line-height: normal;
    max-height: 80vw;
  }

  .ks-store-locator-card-title {
    text-align: center;
    font-size: 16px;
    padding: 16px 0 6px;
    margin: 0 0 6px;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .ks-store-locator-card-list { }

  .ks-store-locator-card-list-item {
    padding: 9px 16px;
    display: flex;
    align-items: center;
    border-left: 2px solid transparent;
    transition: all .2s ease-out;
  }

  .ks-store-locator-card-list-item > * {
    margin-bottom: 1px;
  }

  .ks-store-locator-card-list-item-icon {
    flex-shrink: 0;
    margin-right: 12px;
    opacity: .5;
    transition: all .2s ease-out;
  }

  .ks-store-locator-card-list-item.active .ks-store-locator-card-list-item-icon {
    opacity: 1;
  }

  .ks-store-locator-card-list-item a {
    color: currentColor;
    text-decoration: underline;
  }

  .ks-store-locator-card-list-item-title {
    font-weight: bold;
    cursor: pointer;
  }

  .ks-store-locator-card-list-item-title:hover,
  .ks-store-locator-card-list-item-title:focus {
    text-decoration: underline;
  }

  .ks-store-locator-card-list-item-phone-coordiates {
    font-size: .95em;
    margin-top: 2px;
  }

  .ks-store-locator-card-empty {
    padding: 16px;
    text-align: center;
  }

  #ks-store-locator-{{ section.id }} .ks-store-locator-card {
    background-color: {{ section.settings.card_bg_color | color_modify: 'alpha', 0.9 }};
    color: {{ section.settings.card_text_color }};
    border-radius: {{ section.settings.map_border_radius | divided_by: 2 | append: 'px' }};
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
    box-shadow: 0 0 12px {{ section.settings.card_text_color | color_modify: 'alpha', 0.1 }};
  }

  #ks-store-locator-{{ section.id }} .ks-store-locator-card-title {
    border-bottom: 1px dotted {{ section.settings.card_text_color | color_modify: 'alpha', 0.1 }};
  }

  #ks-store-locator-{{ section.id }} .ks-store-locator-card-list-item {
    border-bottom: 1px dotted {{ section.settings.card_text_color | color_modify: 'alpha', 0.1 }};
  }

  #ks-store-locator-{{ section.id }} .ks-store-locator-card-list-item.active {
    background-color: {{ section.settings.card_bg_color | color_modify: 'alpha', 1 }};
    border-left-color: {{ section.settings.card_text_color | color_modify: 'alpha', 1 }};
  }

  @media (max-width: 999px) {
    .ks-store-locator-card {
      margin-top: 16px;
    }
  }

  @media (min-width: 1000px) {
    .ks-store-locator-card {
      position: absolute;
      top: 5%;
      left: 30px;
      width: 300px;
      height: 90%;
      border-radius: 4px;
    }
  }

{%- endstyle -%}

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const init = () => {
      const wrapper = document.querySelector('#ks-store-locator-{{ section.id }}')
      mapboxgl.accessToken = wrapper.dataset.mapToken

      const lng = Number(wrapper.dataset.mapPosition.split(',')[0])
      const lat = Number(wrapper.dataset.mapPosition.split(',')[1])
      
      var map = new mapboxgl.Map({
        container: wrapper.dataset.mapContainer,
        style: `mapbox://styles/mapbox/${wrapper.dataset.mapStyle}`,
        center: [lng, lat],
        zoom: wrapper.dataset.mapZoom
      })

      if (wrapper.dataset.controlsGeocoder === 'true') {
        map.addControl(
          new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            mapboxgl: mapboxgl,
            countries: wrapper.dataset.controlsGeocoderCountries.length
              ? wrapper.dataset.controlsGeocoderCountries
              : null,
          })
        )
      }

      if (wrapper.dataset.controlsFullscreen === 'true') {
        map.addControl(new mapboxgl.FullscreenControl())
      }

      if (wrapper.dataset.controlsNavigation === 'true') {
        map.addControl(new mapboxgl.NavigationControl())
      }

      if (wrapper.dataset.controlsGeolocate === 'true') {
        map.addControl(new mapboxgl.GeolocateControl())
      }

      map.on('load', () => {
        map.addSource('my-locations', {
          type: 'geojson',
          data: wrapper.dataset.geojsonFile,
          cluster: true,
          clusterMaxZoom: 10,
          clusterRadius: 50
        })

        map.addLayer({
          id: 'clusters',
          type: 'circle',
          source: 'my-locations',
          filter: ['has', 'point_count'],
          paint: {
            'circle-color': [
              'step',
              ['get', 'point_count'],
              wrapper.dataset.clustersBaseBgColor,
              Number(wrapper.dataset.clustersTierOne),
              wrapper.dataset.clustersTierOneBgColor,
              Number(wrapper.dataset.clustersTierTwo),
              wrapper.dataset.clustersTierTwoBgColor
            ],
            'circle-radius': [
              'step',
              ['get', 'point_count'],
              20,
              Number(wrapper.dataset.clustersTierOne),
              30,
              Number(wrapper.dataset.clustersTierTwo),
              40
            ]
          }
        })

        map.addLayer({
          id: 'cluster-count',
          type: 'symbol',
          source: 'my-locations',
          filter: ['has', 'point_count'],
          layout: {
            'text-field': ['get', 'point_count_abbreviated'],
            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
            'text-size': 12
          },
          paint: {
            "text-color": wrapper.dataset.clustersBaseTextColor
          }
        })

        map.loadImage(
          wrapper.dataset.markerImg,
          (error, image) => {
            if (error) {
              map.addLayer({
                id: 'unclustered-point',
                type: 'circle',
                source: 'my-locations',
                filter: ['!', ['has', 'point_count']],
                paint: {
                  'circle-color': wrapper.dataset.clustersBaseBgColor,
                  'circle-radius': 8,
                  'circle-stroke-width': 1,
                  'circle-stroke-color': '#fff'
                }
              })    
            } else {
              map.addImage('custom-marker', image)
              map.addLayer({
                id: 'unclustered-point',
                type: 'symbol',
                source: 'my-locations',
                filter: ['!', ['has', 'point_count']],
                layout: {
                  'icon-image': 'custom-marker',
                  'icon-size': 0.5
                }
              })

            }
          }
        )

        map.on('click', 'clusters', (e) => {
          const features = map.queryRenderedFeatures(e.point, {
            layers: ['clusters']
          })
          const clusterId = features[0].properties.cluster_id
          map.getSource('my-locations').getClusterExpansionZoom(
            clusterId,
            (err, zoom) => {
              if (err) return

              map.easeTo({
                center: features[0].geometry.coordinates,
                zoom: zoom
              })
            }
          )
        })

        const popup = new mapboxgl.Popup({
          offset: [0, -20]
        })

        function showPopup (feature) {
          const coordinates = feature.geometry.coordinates.slice()
          const properties = feature.properties
          const googleMapsLink = `https://www.google.com/maps?saddr=My+Location&daddr=${coordinates[1]},${coordinates[0]}`

          popup
            .setLngLat(coordinates)
            .setHTML(`
              <div class="mapboxgl-popup-title">
                ${properties['title']}
              </div>
              <div class="mapboxgl-popup-address">
                ${properties['address']}
              </div>
              <div class="mapboxgl-popup-phone">
                ð <a href="tel:${properties['phone']}">${properties['phone']}</a>
              </div>
              <div class="mapboxgl-popup-directions">
                <a href="${googleMapsLink}" target="_blank">Directions</a>
              </div>  
            `)
            .addTo(map)

          // map.flyTo({center: coordinates})

          console.log(properties)

          setTimeout(() => {
            wrapper.querySelectorAll('.ks-store-locator-card-list-item').forEach(elem => {
              if (elem.dataset.title === properties['title']) {
                elem.classList.add('active')
                console.log(elem.offsetTop)
                wrapper.querySelector('.ks-store-locator-card').scrollTo({top: elem.offsetTop, behavior: 'smooth'})
              }
            })
          }, 500)
        }

        map.on('click', 'unclustered-point', (e) => {
          const coordinates = e.features[0].geometry.coordinates.slice()

          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
          }
          
          showPopup(e.features[0])
        })

        function buildLocationsList () {
          const features = map.queryRenderedFeatures({ layers: ['unclustered-point'] })
          console.log(features)

          const listElem = wrapper.querySelector('.ks-store-locator-card-list')
          const emptyElem = wrapper.querySelector('.ks-store-locator-card-empty')
          listElem.innerHTML = ''

          if (features.length) {
            let htmlList = ''

            features.forEach((feature, index) => {
              const properties = feature.properties
              const googleMapsLink = `https://www.google.com/maps?saddr=My+Location&daddr=${feature.geometry.coordinates[1]},${feature.geometry.coordinates[0]}`

              if (index < 50 ) {
                htmlList += `
                  <div 
                    class="ks-store-locator-card-list-item" 
                    data-title="${properties['title']}"
                    role="listitem">
                    <div class="ks-store-locator-card-list-item-icon">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-geo-alt-fill" viewBox="0 0 16 16" aria-hidden="true">
                        <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10m0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6"/>
                      </svg>
                    </div>
                    <div class="ks-store-locator-card-list-item-content">
                      <div 
                        class="ks-store-locator-card-list-item-title" 
                        role="button"
                        data-index="${index}">
                        ${properties['title']}
                      </div>
                      <div class="ks-store-locator-card-list-item-address">
                        ${properties['address']}
                      </div> 
                      <div class="ks-store-locator-card-list-item-phone-coordiates">
                        <a href="tel:${properties['phone']}">${properties['phone']}</a>
                        <span>|</span>
                        <a href="${googleMapsLink}" target="_blank">Directions</a>
                      </div>
                    </div>
                  </div>
                `
              }
            })

            listElem.insertAdjacentHTML('afterbegin', htmlList)
            listElem.removeAttribute('hidden')
            emptyElem.setAttribute('hidden', 'hidden')

            listElem.querySelectorAll('.ks-store-locator-card-list-item-title').forEach(elem => {
              elem.addEventListener('click', () => {
                const index = Number(elem.dataset.index)

                showPopup(features[index])
              })
            })

          } else {
            listElem.setAttribute('hidden', 'hidden')
            emptyElem.removeAttribute('hidden')
          }
        }

        map.on('mouseenter', 'clusters', () => {
          map.getCanvas().style.cursor = 'pointer'
        })

        map.on('mouseleave', 'clusters', () => {
          map.getCanvas().style.cursor = ''
        })

        map.on('mouseenter', 'unclustered-point', () => {
          map.getCanvas().style.cursor = 'pointer'
        })

        map.on('mouseleave', 'unclustered-point', () => {
          map.getCanvas().style.cursor = ''
        })

        map.on('idle', () => {
          buildLocationsList()
          console.log(map.getZoom())
        })

        popup.on('close', () => {
          wrapper.querySelectorAll('.ks-store-locator-card-list-item').forEach(elem => {
            elem.classList.remove('active')
          })
        })
      
      })
    }
    init()

    document.addEventListener('shopify:section:load', (event) => {
      if (event.detail.sectionId === '{{ section.id }}') {
        init()
      }
    })
  })
</script>

{% liquid 
  if section.settings.marker_img != blank
    assign marker_img_height_x2 = section.settings.marker_img_height | times: 2
    assign marker_img = section.settings.marker_img | image_url: height: marker_img_height_x2
  endif
%}

<div 
  id="ks-store-locator-{{ section.id }}"
  class="ks-store-locator"
  data-map-token="{{ section.settings.map_token }}"
  data-map-container="ks-store-locator-map-{{ section.id }}"
  data-map-style="{{ section.settings.map_style }}"
  data-map-zoom="{{ section.settings.map_zoom }}"
  data-map-position="{{ section.settings.map_position }}"
  data-geojson-file="{{ section.settings.geojson_file_name | file_url }}"
  data-controls-geocoder="{{ section.settings.controls_geocoder }}"
  data-controls-geocoder-countries="{{ section.settings.controls_geocoder_countries }}"
  data-controls-fullscreen="{{ section.settings.controls_fullscreen }}"
  data-controls-navigation="{{ section.settings.controls_navigation }}"
  data-controls-geolocate="{{ section.settings.controls_geolocate }}"
  data-clusters-base-bg-color="{{ section.settings.clusters_base_bg_color }}"
  data-clusters-base-text-color="{{ section.settings.clusters_base_text_color }}"
  data-clusters-tier-one="{{ section.settings.clusters_tier_1 }}"
  data-clusters-tier-one-bg-color="{{ section.settings.clusters_tier_1_bg_color }}"
  data-clusters-tier-two="{{ section.settings.clusters_tier_2 }}"
  data-clusters-tier-two-bg-color="{{ section.settings.clusters_tier_2_bg_color }}"
  data-marker-img="{{ marker_img }}">
  
  <div class="section-header page-width container">
    {%- if section.settings.heading != blank -%}
      <h2 class="title inline-richtext {{ section.settings.heading_size }}">
        {{ section.settings.heading }}
      </h2>
    {%- endif -%}
    {%- if section.settings.description != blank %}
      <div class="description rte">
        {{ section.settings.description }}
      </div>
    {% endif %}
  </div>

  <div class="ks-store-locator-container {% if section.settings.container %}page-width container{% endif %}">
    <div class="ks-store-locator-map-wrapper">
      <div id="ks-store-locator-map-{{ section.id }}" class="ks-store-locator-map"></div>
      <div id="ks-store-locator-card-{{ section.id }}" class="ks-store-locator-card">
        <h3 class="ks-store-locator-card-title">
          {{ section.settings.card_title }}
        </h3>
        <div class="ks-store-locator-card-list" role="list" hidden></div>
        <div class="ks-store-locator-card-empty" hidden>
          No locations found on your current view!
        </div>
      </div>
    </div>
  </div>
  
</div>

{% schema %}
{
  "name": "KS - Store locator",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "header",
      "content": "General"
    },
    {
      "type": "color",
      "id": "color_background",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "color_foreground",
      "label": "Foreground color",
      "default": "#121212"
    },
    {
      "type": "checkbox",
      "id": "container",
      "label": "Wrap in a container",
      "default": true
    },
    {
      "type": "header",
      "content": "Header"
    },
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "Heading",
      "default": "Store Locator"
    },
    {
      "type": "select",
      "id": "heading_size",
      "label": "Heading size",
      "options": [
        { "value": "h2", "label": "Small" },
        { "value": "h1", "label": "Medium" },
        { "value": "h0", "label": "Large" }
      ],
      "default": "h1"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description",
      "default": "<p>Optional description for this section</p>",
      "info": "Leave empty to disable"
    },
    {
      "type": "header",
      "content": "Map"
    },
    {
      "type": "text",
      "id": "map_token",
      "label": "Access token",
      "info": "Mapbox API access token. [Learn more](https://docs.mapbox.com/help/getting-started/access-tokens/) Also, you may refer to our installation video for more details."
    },
    {
      "type": "range",
      "id": "map_height_mobile",
      "label": "Map height - mobile",
      "default": 500,
      "min": 400,
      "max": 800,
      "step": 50,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "map_height_desktop",
      "label": "Map height - desktop",
      "default": 600,
      "min": 400,
      "max": 800,
      "step": 50,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "map_border_radius",
      "label": "Border radius (px)",
      "min": 0,
      "max": 60,
      "step": 1,
      "default": 16,
      "unit": "px"
    },
    {
      "type": "text",
      "id": "map_position",
      "label": "Initial position",
      "info": "Longitude, Latitude",
      "default": "-98.56, 39.81"
    },
    {
      "type": "select",
      "id": "map_style",
      "label": "Map style",
      "options": [
        { "value": "streets-v12", "label": "streets-v12" },
        { "value": "outdoors-v12", "label": "outdoors-v12" },
        { "value": "light-v11", "label": "light-v11" },
        { "value": "dark-v11", "label": "dark-v11" },
        { "value": "satellite-v9", "label": "satellite-v9" },
        { "value": "satellite-streets-v12", "label": "satellite-streets-v12" },
        { "value": "navigation-day-v1", "label": "navigation-day-v1" },
        { "value": "navigation-night-v1", "label": "navigation-night-v1" }
      ],
      "default": "streets-v12"
    },
    {
      "type": "range",
      "id": "map_zoom",
      "label": "Initial zoom",
      "default": 4,
      "min": 2,
      "max": 12,
      "step": 1
    },
    {
      "type": "header",
      "content": "GeoJson data"
    },
    {
      "type": "text",
      "id": "geojson_file_name",
      "label": "File name",
      "info": "Upload your location data in a 'geojson' format into the [Files](https://admin.shopify.com/content/files) and specify here the exact file name. [Learn more about the GeoJson format](https://geojson.org/)",
      "default": "locations.geojson"
    },
    {
      "type": "header",
      "content": "Map controls"
    },
    {
      "type": "checkbox",
      "id": "controls_geocoder",
      "label": "Geocoder (search autocomplete)",
      "default": true
    },
    {
      "type": "text",
      "id": "controls_geocoder_countries",
      "label": "Geocoder - countries",
      "info": "Comma separated list. Leave empty to search in all countries",
      "default": "us, ca"
    },
    {
      "type": "checkbox",
      "id": "controls_fullscreen",
      "label": "Fullscreen",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "controls_navigation",
      "label": "Navigation",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "controls_geolocate",
      "label": "Geolocate (current location)",
      "default": true
    },
    {
      "type": "header",
      "content": "Marker icon"
    },
    {
      "type": "image_picker",
      "id": "marker_img",
      "label": "Image",
      "info": "If no marker icon is specified the default circle symbol will be used instead."
    },
    {
      "type": "range",
      "id": "marker_img_height",
      "label": "Image height",
      "min": 20,
      "step": 2,
      "max": 100,
      "default": 80
    },
    {
      "type": "header",
      "content": "Clusters",
      "info": "Group locations within an area using clusters"
    },
    {
      "type": "color",
      "id": "clusters_base_bg_color",
      "label": "Base background color",
      "default": "#38bdf8"
    },
    {
      "type": "color",
      "id": "clusters_base_text_color",
      "label": "Base text color",
      "default": "#000000"
    },
    {
      "type": "text",
      "id": "clusters_tier_1",
      "label": "Tier 1",
      "default": "50"
    },
    {
      "type": "color",
      "id": "clusters_tier_1_bg_color",
      "label": "Tier 1 - bg color",
      "default": "#4ade80"
    },
    {
      "type": "text",
      "id": "clusters_tier_2",
      "label": "Tier 2",
      "default": "250"
    },
    {
      "type": "color",
      "id": "clusters_tier_2_bg_color",
      "label": "Tier 2 - bg color",
      "default": "#fb923c"
    },
    {
      "type": "header",
      "content": "Popup info"
    },
    {
      "type": "color",
      "id": "popup_bg_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "popup_text_color",
      "label": "Text color",
      "default": "#121212"
    },
    {
      "type": "header",
      "content": "Locations card"
    },
    {
      "type": "text",
      "id": "card_bg_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "card_text_color",
      "label": "Text color",
      "default": "#121212"
    },
    {
      "type": "text",
      "id": "card_title",
      "label": "Title",
      "default": "Locations"
    },
    {
      "type": "header",
      "content": "Section padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 80
    },
    {
      "type": "header",
      "content": "Get Support",
      "info": "Please use our [Community Forum](https://community.kondasoft.com) to get help from our support team."
    },
    {
      "type": "header",
      "content": "Shopify Snippets",
      "info": "Check out our other [Shopify Snippets](https://www.kondasoft.com/collections/shopify-snippets)"
    },
    {
      "type": "header",
      "content": "Shopify Themes",
      "info": "Ready to take your store to the next level? Check out our [Premium Shopify Themes](https://www.kondasoft.com/collections/shopify-themes)."
    },
    {
      "type": "paragraph",
      "content": "Â© 2024 KondaSoft.com"
    }
  ],
  "presets": [
    {
      "name": "KS - Store locator"
    }
  ]
}
{% endschema %}
